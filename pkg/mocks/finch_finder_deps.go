// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch/pkg/path (interfaces: FinchFinderDeps)
//
// Generated by this command:
//
//	mockgen -copyright_file=../../copyright_header -destination=../mocks/finch_finder_deps.go -package=mocks -mock_names FinchFinderDeps=FinchFinderDeps . FinchFinderDeps
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// FinchFinderDeps is a mock of FinchFinderDeps interface.
type FinchFinderDeps struct {
	ctrl     *gomock.Controller
	recorder *FinchFinderDepsMockRecorder
	isgomock struct{}
}

// FinchFinderDepsMockRecorder is the mock recorder for FinchFinderDeps.
type FinchFinderDepsMockRecorder struct {
	mock *FinchFinderDeps
}

// NewFinchFinderDeps creates a new mock instance.
func NewFinchFinderDeps(ctrl *gomock.Controller) *FinchFinderDeps {
	mock := &FinchFinderDeps{ctrl: ctrl}
	mock.recorder = &FinchFinderDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FinchFinderDeps) EXPECT() *FinchFinderDepsMockRecorder {
	return m.recorder
}

// Env mocks base method.
func (m *FinchFinderDeps) Env(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Env indicates an expected call of Env.
func (mr *FinchFinderDepsMockRecorder) Env(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*FinchFinderDeps)(nil).Env), key)
}

// EvalSymlinks mocks base method.
func (m *FinchFinderDeps) EvalSymlinks(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalSymlinks", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvalSymlinks indicates an expected call of EvalSymlinks.
func (mr *FinchFinderDepsMockRecorder) EvalSymlinks(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSymlinks", reflect.TypeOf((*FinchFinderDeps)(nil).EvalSymlinks), path)
}

// Executable mocks base method.
func (m *FinchFinderDeps) Executable() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executable")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Executable indicates an expected call of Executable.
func (mr *FinchFinderDepsMockRecorder) Executable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executable", reflect.TypeOf((*FinchFinderDeps)(nil).Executable))
}

// FilePathJoin mocks base method.
func (m *FinchFinderDeps) FilePathJoin(elem ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range elem {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilePathJoin", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// FilePathJoin indicates an expected call of FilePathJoin.
func (mr *FinchFinderDepsMockRecorder) FilePathJoin(elem ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilePathJoin", reflect.TypeOf((*FinchFinderDeps)(nil).FilePathJoin), elem...)
}

// GetUserHome mocks base method.
func (m *FinchFinderDeps) GetUserHome() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHome")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHome indicates an expected call of GetUserHome.
func (mr *FinchFinderDepsMockRecorder) GetUserHome() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHome", reflect.TypeOf((*FinchFinderDeps)(nil).GetUserHome))
}
