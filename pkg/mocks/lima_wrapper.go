// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch/pkg/lima/wrapper (interfaces: LimaWrapper)
//
// Generated by this command:
//
//	mockgen --destination=../../mocks/lima_wrapper.go -package=mocks github.com/runfinch/finch/pkg/lima/wrapper LimaWrapper
//

// Package mocks is a generated GoMock package.
package mocks

import (
	user "os/user"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLimaWrapper is a mock of LimaWrapper interface.
type MockLimaWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockLimaWrapperMockRecorder
	isgomock struct{}
}

// MockLimaWrapperMockRecorder is the mock recorder for MockLimaWrapper.
type MockLimaWrapperMockRecorder struct {
	mock *MockLimaWrapper
}

// NewMockLimaWrapper creates a new mock instance.
func NewMockLimaWrapper(ctrl *gomock.Controller) *MockLimaWrapper {
	mock := &MockLimaWrapper{ctrl: ctrl}
	mock.recorder = &MockLimaWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimaWrapper) EXPECT() *MockLimaWrapperMockRecorder {
	return m.recorder
}

// LimaUser mocks base method.
func (m *MockLimaWrapper) LimaUser(warn bool) *user.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimaUser", warn)
	ret0, _ := ret[0].(*user.User)
	return ret0
}

// LimaUser indicates an expected call of LimaUser.
func (mr *MockLimaWrapperMockRecorder) LimaUser(warn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimaUser", reflect.TypeOf((*MockLimaWrapper)(nil).LimaUser), warn)
}
