// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch/pkg/command (interfaces: NerdctlCmdCreator)
//
// Generated by this command:
//
//	mockgen -copyright_file=../../copyright_header -destination=../mocks/command_nerdctl_cmd_creator.go -package=mocks -mock_names NerdctlCmdCreator=NerdctlCmdCreator . NerdctlCmdCreator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	command "github.com/runfinch/finch/pkg/command"
	gomock "go.uber.org/mock/gomock"
)

// NerdctlCmdCreator is a mock of NerdctlCmdCreator interface.
type NerdctlCmdCreator struct {
	ctrl     *gomock.Controller
	recorder *NerdctlCmdCreatorMockRecorder
	isgomock struct{}
}

// NerdctlCmdCreatorMockRecorder is the mock recorder for NerdctlCmdCreator.
type NerdctlCmdCreatorMockRecorder struct {
	mock *NerdctlCmdCreator
}

// NewNerdctlCmdCreator creates a new mock instance.
func NewNerdctlCmdCreator(ctrl *gomock.Controller) *NerdctlCmdCreator {
	mock := &NerdctlCmdCreator{ctrl: ctrl}
	mock.recorder = &NerdctlCmdCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *NerdctlCmdCreator) EXPECT() *NerdctlCmdCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *NerdctlCmdCreator) Create(args ...string) command.Command {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(command.Command)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *NerdctlCmdCreatorMockRecorder) Create(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*NerdctlCmdCreator)(nil).Create), args...)
}

// CreateWithoutStdio mocks base method.
func (m *NerdctlCmdCreator) CreateWithoutStdio(args ...string) command.Command {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWithoutStdio", varargs...)
	ret0, _ := ret[0].(command.Command)
	return ret0
}

// CreateWithoutStdio indicates an expected call of CreateWithoutStdio.
func (mr *NerdctlCmdCreatorMockRecorder) CreateWithoutStdio(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithoutStdio", reflect.TypeOf((*NerdctlCmdCreator)(nil).CreateWithoutStdio), args...)
}

// RunWithReplacingStdout mocks base method.
func (m *NerdctlCmdCreator) RunWithReplacingStdout(rs []command.Replacement, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{rs}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWithReplacingStdout", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithReplacingStdout indicates an expected call of RunWithReplacingStdout.
func (mr *NerdctlCmdCreatorMockRecorder) RunWithReplacingStdout(rs any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{rs}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithReplacingStdout", reflect.TypeOf((*NerdctlCmdCreator)(nil).RunWithReplacingStdout), varargs...)
}
