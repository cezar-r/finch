// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch/pkg/dependency (interfaces: Dependency)
//
// Generated by this command:
//
//	mockgen -copyright_file=../../copyright_header -destination=../mocks/pkg_dependency_dependency.go -package=mocks -mock_names Dependency=Dependency . Dependency
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Dependency is a mock of Dependency interface.
type Dependency struct {
	ctrl     *gomock.Controller
	recorder *DependencyMockRecorder
	isgomock struct{}
}

// DependencyMockRecorder is the mock recorder for Dependency.
type DependencyMockRecorder struct {
	mock *Dependency
}

// NewDependency creates a new mock instance.
func NewDependency(ctrl *gomock.Controller) *Dependency {
	mock := &Dependency{ctrl: ctrl}
	mock.recorder = &DependencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Dependency) EXPECT() *DependencyMockRecorder {
	return m.recorder
}

// Install mocks base method.
func (m *Dependency) Install() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install")
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *DependencyMockRecorder) Install() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*Dependency)(nil).Install))
}

// Installed mocks base method.
func (m *Dependency) Installed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Installed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Installed indicates an expected call of Installed.
func (mr *DependencyMockRecorder) Installed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Installed", reflect.TypeOf((*Dependency)(nil).Installed))
}

// RequiresRoot mocks base method.
func (m *Dependency) RequiresRoot() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequiresRoot")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RequiresRoot indicates an expected call of RequiresRoot.
func (mr *DependencyMockRecorder) RequiresRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiresRoot", reflect.TypeOf((*Dependency)(nil).RequiresRoot))
}
